services:
  # ... (serviços app, nginx, db, redis sem alterações) ...

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
      - chatbot-network

  nginx:
    image: nginx:1.19-alpine
    container_name: chatbot-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - chatbot-network
    depends_on:
      - app

  db:
    image: mysql:8.0
    container_name: chatbot-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-laravel}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_USER: ${DB_USERNAME:-user}
    volumes:
      - ./docker/dbdata:/var/lib/mysql
    ports:
      - "33066:3306"
    networks:
      - chatbot-network

  redis:
    image: redis:6.2-alpine
    container_name: chatbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - chatbot-network
  
  # NOVO: Serviço para o servidor Laravel Reverb
  reverb:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-reverb
    restart: unless-stopped
    # O comando para iniciar o servidor Reverb
    command: "php artisan reverb:start --host=0.0.0.0 --port=8080"
    working_dir: /var/www/html
    ports:
      - "8080:8080" # Expõe a porta do WebSocket
    volumes:
      - ./:/var/www/html
    networks:
      - chatbot-network
    depends_on:
      - app
      - redis

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-worker
    restart: unless-stopped
    command: "php artisan queue:work redis --sleep=3 --tries=3"
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
      - chatbot-network
    depends_on:
      - app
      - redis

  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    container_name: chatbot-streamlit
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit:/app
    networks:
      - chatbot-network
    depends_on:
      - app

networks:
  chatbot-network:
    driver: bridge
